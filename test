package com.milan.codechangepresentationgenerator.service.impl;

import com.milan.codechangepresentationgenerator.dto.PresentationRequest;
import com.milan.codechangepresentationgenerator.model.Presentation;
import com.milan.codechangepresentationgenerator.repository.PresentationRepository;
import com.milan.codechangepresentationgenerator.service.PresentationService;
import com.milan.codechangepresentationgenerator.service.shared.MailService;
import com.milan.codechangepresentationgenerator.util.DiffResult;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.xslf.usermodel.*;
import org.kohsuke.github.GitHub;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;
@Slf4j
@Service
public class PresentationServiceImpl implements PresentationService {
    @Autowired
    private DataSource dataSource;
    @Autowired
    private MailService mailService;
    @Autowired
    private PresentationRepository presentationRepository;
    @Autowired
    private  GitHub github;

    @Override
    public Presentation generatePresentation(PresentationRequest request) {
        return null;
    }
    @Override
    public String createPresentation(List<DiffResult> diffResults, String repoFullName, String commitSha, String email) {
        XMLSlideShow ppt = new XMLSlideShow();

        // Create the first slide
        XSLFSlide firstSlide = ppt.createSlide();

        // Title
        XSLFTextShape title = firstSlide.createTextBox();
        title.setText("Code Changes Presentation");
        title.setAnchor(new Rectangle(50, 50, 600, 50));

        XSLFTextParagraph titleParagraph = title.addNewTextParagraph();
        XSLFTextRun titleRun = titleParagraph.addNewTextRun();
        titleRun.setText("Code Changes Presentation");
        titleRun.setFontColor(new Color(0, 102, 204));
        titleRun.setFontSize(24.0);

        // Author Info
        XSLFTextShape authorInfo = firstSlide.createTextBox();
        authorInfo.setAnchor(new Rectangle(50, 120, 600, 100));
        XSLFTextParagraph authorParagraph = authorInfo.addNewTextParagraph();
        XSLFTextRun authorRun = authorParagraph.addNewTextRun();
        authorRun.setText("Repository: " + repoFullName +
                "\nCommit SHA: " + commitSha +
                "\nDate: " + LocalDate.now().format(DateTimeFormatter.ofPattern("MMMM dd, yyyy")) +
                "\nDay: " + LocalDate.now().getDayOfWeek());
        authorRun.setFontColor(new Color(102, 102, 102));
        authorRun.setFontSize(14.0);

        // Add slides for each file diff
        for (DiffResult result : diffResults) {
            List<String> changes = result.getChanges();
            if (changes == null) {
                continue;
            }

            int maxLinesPerSlide = 15;
            int totalLines = changes.size();
            int linesOnCurrentSlide = 0;

            for (int i = 0; i < totalLines; i++) {
                if (linesOnCurrentSlide % maxLinesPerSlide == 0) {
                    // Create a new slide if we need to start a new page
                    XSLFSlide diffSlide = ppt.createSlide();

                    // Diff Title
                    XSLFTextShape diffTitle = diffSlide.createTextBox();
                    diffTitle.setAnchor(new Rectangle(50, 50, 600, 50));
                    XSLFTextParagraph diffTitleParagraph = diffTitle.addNewTextParagraph();
                    XSLFTextRun diffTitleRun = diffTitleParagraph.addNewTextRun();
                    diffTitleRun.setText("File: " + result.getFileName() +
                            (i > 0 ? " (contd...)" : ""));
                    diffTitleRun.setFontColor(new Color(0, 102, 204));
                    diffTitleRun.setFontSize(20.0);

                    // Diff Content
                    XSLFTextShape diffContent = diffSlide.createTextBox();
                    diffContent.setAnchor(new Rectangle(50, 120, 600, 400));

                    // Add the text content
                    XSLFTextParagraph diffContentParagraph = diffContent.addNewTextParagraph();
                    XSLFTextRun diffContentRun = diffContentParagraph.addNewTextRun();
                    String change = changes.get(i);

                    if (change.startsWith("+")) {
                        diffContentRun.setText(change);
                        diffContentRun.setFontColor(Color.GREEN);
                    } else if (change.startsWith("-")) {
                        diffContentRun.setText(change);
                        diffContentRun.setFontColor(Color.RED);
                    } else {
                        diffContentRun.setText(change);
                        diffContentRun.setFontColor(Color.BLACK);
                    }

                    diffContentRun.setFontSize(12.0);
                    linesOnCurrentSlide++;
                }
            }
        }

        String presentationId = UUID.randomUUID().toString();
        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            ppt.write(out);
            byte[] pptData = out.toByteArray();
            saveToDatabase(presentationId, pptData);

            String downloadLink = "http://localhost:8080/api/presentations/download/" + presentationId;
            sendEmailWithLink(downloadLink, repoFullName, commitSha, email);
        } catch (IOException e) {
            log.error("Error creating presentation", e);
        }

        return presentationId;
    }

    private void sendEmailWithLink(String downloadLink, String repoFullName, String commitSha, String email) {
        try {
            String body = mailService.loadTemplate("templates/emailTemplete.html",
                    "{{repoFullName}}", repoFullName,
                    "{{commitSha}}", commitSha,
                    "{{downloadLink}}", downloadLink);

            mailService.sendEmail(email, "Your Code Changes Presentation is Ready", body);
        } catch (Exception e) {
            log.error("Failed to send email with link due to an error: {}", e.getMessage(), e);
        }
    }


    private void saveToDatabase(String presentationId, byte[] pptData) {
        Presentation presentation = new Presentation();
        presentation.setId(presentationId);
        log.info("Presentation id {}", presentationId);
        presentation.setData(pptData);

        presentationRepository.save(presentation);
    }
    @Override
    public byte[] getPresentation(Long id) {
        return new byte[0];
    }


    @Override
    public void savePresentation(String presentationId) {
    }
}
